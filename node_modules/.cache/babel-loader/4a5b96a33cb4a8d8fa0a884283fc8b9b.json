{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const mailSlice = createSlice({\n  name: \"mail\",\n  initialState: {\n    sendMessageIsOpen: false\n  },\n  reducers: {\n    openSendMessage: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.sendMessageIsOpen = true;\n    },\n    closeSendMessage: state => {\n      state.sendMessageIsOpen = false;\n    }\n  }\n});\nexport const {\n  openSendMessage,\n  closeSendMessage\n} = mailSlice.actions; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.mail.sendMessageIsOpen)`\n\nexport const selectSendMessageIsOpen = state => state.mail.sendMessageIsOpen;\nexport default mailSlice.reducer;","map":{"version":3,"sources":["/Users/rakesh/Desktop/geeksforgeeks/gmail-project/src/features/mailSlice.js"],"names":["createSlice","mailSlice","name","initialState","sendMessageIsOpen","reducers","openSendMessage","state","closeSendMessage","actions","selectSendMessageIsOpen","mail","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,SAAS,GAAGD,WAAW,CAAC;AACnCE,EAAAA,IAAI,EAAE,MAD6B;AAEnCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,iBAAiB,EAAE;AADP,GAFqB;AAKnCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,eAAe,EAAGC,KAAD,IAAW;AAC1B;AACA;AACA;AACA;AACAA,MAAAA,KAAK,CAACH,iBAAN,GAA0B,IAA1B;AACD,KAPO;AAQRI,IAAAA,gBAAgB,EAAGD,KAAD,IAAW;AAC3BA,MAAAA,KAAK,CAACH,iBAAN,GAA0B,KAA1B;AACD;AAVO;AALyB,CAAD,CAA7B;AAmBP,OAAO,MAAM;AAAEE,EAAAA,eAAF;AAAmBE,EAAAA;AAAnB,IAAwCP,SAAS,CAACQ,OAAxD,C,CAEP;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,uBAAuB,GAAIH,KAAD,IAAWA,KAAK,CAACI,IAAN,CAAWP,iBAAtD;AAEP,eAAeH,SAAS,CAACW,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const mailSlice = createSlice({\r\n  name: \"mail\",\r\n  initialState: {\r\n    sendMessageIsOpen: false,\r\n  },\r\n  reducers: {\r\n    openSendMessage: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.sendMessageIsOpen = true;\r\n    },\r\n    closeSendMessage: (state) => {\r\n      state.sendMessageIsOpen = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { openSendMessage, closeSendMessage } = mailSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\n\r\n// export const incrementAsync = (amount) => (dispatch) => {\r\n//   setTimeout(() => {\r\n//     dispatch(incrementByAmount(amount));\r\n//   }, 1000);\r\n// };\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.mail.sendMessageIsOpen)`\r\nexport const selectSendMessageIsOpen = (state) => state.mail.sendMessageIsOpen;\r\n\r\nexport default mailSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}