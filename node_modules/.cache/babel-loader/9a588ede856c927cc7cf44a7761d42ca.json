{"ast":null,"code":"import{createSlice}from\"@reduxjs/toolkit\";export var mailSlice=createSlice({name:\"mail\",initialState:{selectedMail:null,sendMessageIsOpen:false},reducers:{selectMail:function selectMail(state,action){state.selectedMail=action.payload;},openSendMessage:function openSendMessage(state){// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n// doesn't actually mutate the state because it uses the Immer library,\n// which detects changes to a \"draft state\" and produces a brand new\n// immutable state based off those changes\nstate.sendMessageIsOpen=true;},closeSendMessage:function closeSendMessage(state){state.sendMessageIsOpen=false;}}});var _mailSlice$actions=mailSlice.actions,selectMail=_mailSlice$actions.selectMail,openSendMessage=_mailSlice$actions.openSendMessage,closeSendMessage=_mailSlice$actions.closeSendMessage;// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.mail.sendMessageIsOpen)`\nexport{selectMail,openSendMessage,closeSendMessage};export var selectOpenMail=function selectOpenMail(state){return state.mail.selectedMail;};export var selectSendMessageIsOpen=function selectSendMessageIsOpen(state){return state.mail.sendMessageIsOpen;};export default mailSlice.reducer;","map":{"version":3,"sources":["/Users/rakesh/Desktop/geeksforgeeks/gmail-project/src/features/mailSlice.js"],"names":["createSlice","mailSlice","name","initialState","selectedMail","sendMessageIsOpen","reducers","selectMail","state","action","payload","openSendMessage","closeSendMessage","actions","selectOpenMail","mail","selectSendMessageIsOpen","reducer"],"mappings":"AAAA,OAASA,WAAT,KAA4B,kBAA5B,CAEA,MAAO,IAAMC,CAAAA,SAAS,CAAGD,WAAW,CAAC,CACnCE,IAAI,CAAE,MAD6B,CAEnCC,YAAY,CAAE,CACZC,YAAY,CAAE,IADF,CAEZC,iBAAiB,CAAE,KAFP,CAFqB,CAMnCC,QAAQ,CAAE,CACRC,UAAU,CAAE,oBAACC,KAAD,CAAQC,MAAR,CAAmB,CAC7BD,KAAK,CAACJ,YAAN,CAAqBK,MAAM,CAACC,OAA5B,CACD,CAHO,CAIRC,eAAe,CAAE,yBAACH,KAAD,CAAW,CAC1B;AACA;AACA;AACA;AACAA,KAAK,CAACH,iBAAN,CAA0B,IAA1B,CACD,CAVO,CAWRO,gBAAgB,CAAE,0BAACJ,KAAD,CAAW,CAC3BA,KAAK,CAACH,iBAAN,CAA0B,KAA1B,CACD,CAbO,CANyB,CAAD,CAA7B,C,uBA2BHJ,SAAS,CAACY,O,CAHZN,U,oBAAAA,U,CACAI,e,oBAAAA,e,CACAC,gB,oBAAAA,gB,CAGF;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;oDACA,MAAO,IAAME,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACN,KAAD,QAAWA,CAAAA,KAAK,CAACO,IAAN,CAAWX,YAAtB,EAAvB,CACP,MAAO,IAAMY,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAACR,KAAD,QAAWA,CAAAA,KAAK,CAACO,IAAN,CAAWV,iBAAtB,EAAhC,CAEP,cAAeJ,CAAAA,SAAS,CAACgB,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const mailSlice = createSlice({\r\n  name: \"mail\",\r\n  initialState: {\r\n    selectedMail: null,\r\n    sendMessageIsOpen: false,\r\n  },\r\n  reducers: {\r\n    selectMail: (state, action) => {\r\n      state.selectedMail = action.payload;\r\n    },\r\n    openSendMessage: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.sendMessageIsOpen = true;\r\n    },\r\n    closeSendMessage: (state) => {\r\n      state.sendMessageIsOpen = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  selectMail,\r\n  openSendMessage,\r\n  closeSendMessage,\r\n} = mailSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\n\r\n// export const incrementAsync = (amount) => (dispatch) => {\r\n//   setTimeout(() => {\r\n//     dispatch(incrementByAmount(amount));\r\n//   }, 1000);\r\n// };\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.mail.sendMessageIsOpen)`\r\nexport const selectOpenMail = (state) => state.mail.selectedMail;\r\nexport const selectSendMessageIsOpen = (state) => state.mail.sendMessageIsOpen;\r\n\r\nexport default mailSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}